// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid()) @map("_id")

  name String

  email    String  @unique
  username String? @unique
  password String?

  image String?

  accounts Account[]
  messages Message[]
  friends Friend[]
  ChatRoom      ChatRoom[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Friend{
  id String @id @default(cuid()) @map("_id")

  friendId String
  friend   User   @relation(fields: [friendId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatRoom {
  id String @id @default(cuid()) @map("_id")

  name     String
  messages Message[]

  userId String
  user   User   @relation(fields: [userId], references: [id])

  chatRoomRole ChatRoomRole @default(MEMBER)

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

enum ChatRoomRole {
  ADMIN
  MEMBER
}

model Message {
  id String @id @default(cuid()) @map("_id")

  chatRoomId String
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
